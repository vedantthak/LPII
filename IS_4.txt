Two numbers are said to be coprime (or relatively prime) if their greatest common divisor (GCD) is 1. In other words, they do not have any common divisors other than 1.

For example:

5 and 24 are coprime because the only number that divides both 5 and 24 is 1.

To find the GCD, we check the divisors of each number:

Divisors of 5: 
1
,
5
1,5

Divisors of 24: 
1
,
2
,
3
,
4
,
6
,
8
,
12
,
24
1,2,3,4,6,8,12,24

The only common divisor is 1, so the GCD of 5 and 24 is 1, and therefore, 5 and 24 are coprime.


output

Let's go through each step to explain how the RSA encryption and decryption process works using the given prime numbers 
𝑝
=
5
p=5 and 
𝑞
=
7
q=7 and message 
𝑀
=
3
M=3.

Step-by-Step Calculation:
1. Key Generation:
We start by calculating the public and private keys.

Step 1.1: Compute 
𝑛
n and 
𝜙
(
𝑛
)
ϕ(n):

𝑛
=
𝑝
×
𝑞
=
5
×
7
=
35
n=p×q=5×7=35
𝜙
(
𝑛
)
=
(
𝑝
−
1
)
×
(
𝑞
−
1
)
=
(
5
−
1
)
×
(
7
−
1
)
=
4
×
6
=
24
ϕ(n)=(p−1)×(q−1)=(5−1)×(7−1)=4×6=24
Step 1.2: Choose 
𝑒
e such that 
1
<
𝑒
<
𝜙
(
𝑛
)
1<e<ϕ(n) and 
gcd
(
𝑒
,
𝜙
(
𝑛
)
)
=
1
gcd(e,ϕ(n))=1.

Here, 
𝑒
=
5
e=5 is chosen because 
gcd
(
5
,
24
)
=
1
gcd(5,24)=1, meaning 5 is coprime with 24.

Step 1.3: Compute the modular inverse of 
𝑒
e modulo 
𝜙
(
𝑛
)
ϕ(n) to find 
𝑑
d, where 
𝑑
×
𝑒
≡
1
(
m
o
d
𝜙
(
𝑛
)
)
d×e≡1(modϕ(n)).

We need to find 
𝑑
d such that:

𝑑
×
5
≡
1
(
m
o
d
24
)
d×5≡1(mod24)
To do this, we can use the Extended Euclidean Algorithm, which gives:

5
×
5
=
25
≡
1
(
m
o
d
24
)
5×5=25≡1(mod24)
So, 
𝑑
=
5
d=5.

Therefore, the public key is 
(
𝑒
=
5
,
𝑛
=
35
)
(e=5,n=35) and the private key is 
(
𝑑
=
5
,
𝑛
=
35
)
(d=5,n=35).

2. Encryption:
To encrypt a message 
𝑀
M, we use the formula:

𝐶
=
𝑀
𝑒
m
o
d
 
 
𝑛
C=M 
e
 modn
Given that 
𝑀
=
3
M=3, 
𝑒
=
5
e=5, and 
𝑛
=
35
n=35, we compute the ciphertext 
𝐶
C:

𝐶
=
3
5
m
o
d
 
 
35
C=3 
5
 mod35
First, calculate 
3
5
3 
5
 :

3
5
=
243
3 
5
 =243
Now, take the result modulo 35:

243
m
o
d
 
 
35
=
243
−
(
35
×
6
)
=
243
−
210
=
33
243mod35=243−(35×6)=243−210=33
So, the encrypted message is 
𝐶
=
33
C=33.

3. Decryption:
To decrypt the ciphertext 
𝐶
C, we use the formula:

𝑀
=
𝐶
𝑑
m
o
d
 
 
𝑛
M=C 
d
 modn
Given that 
𝐶
=
33
C=33, 
𝑑
=
5
d=5, and 
𝑛
=
35
n=35, we compute the decrypted message 
𝑀
M:

𝑀
=
33
5
m
o
d
 
 
35
M=33 
5
 mod35
First, calculate 
33
5
33 
5
 :

33
5
=
4182119424
33 
5
 =4182119424
Now, take the result modulo 35:

4182119424
m
o
d
 
 
35
=
4182119424
−
(
35
×
119365984
)
=
4182119424
−
4182119420
=
4
4182119424mod35=4182119424−(35×119365984)=4182119424−4182119420=4
So, 
𝑀
=
4
M=4, which isn't the original message 
3
3.

code explain
This code implements the RSA encryption and decryption algorithm. Let's break it down step by step:

1. Modular Exponentiation Function:
python
Copy
Edit
def power(base, expo, m):
    res = 1
    base = base % m  # Ensure the base is within the modulo range
    while expo > 0:
        if expo & 1:  # Check if the exponent is odd
            res = (res * base) % m  # Multiply the result by base if the exponent is odd
        base = (base * base) % m  # Square the base
        expo //= 2  # Reduce the exponent by half
    return res
power(base, expo, m) calculates 
base
expo
m
o
d
 
 
𝑚
base 
expo
 modm using modular exponentiation. It efficiently computes the power by repeatedly squaring the base and reducing the exponent by half.

2. Extended Euclidean Algorithm for Modular Inverse:
python
Copy
Edit
def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0  # Base case: gcd(a, 0) = a, coefficients are 1 and 0
    g, x1, y1 = extended_gcd(b, a % b)  # Recursively calculate the gcd
    x = y1
    y = x1 - (a // b) * y1
    return g, x, y
extended_gcd(a, b) computes the GCD of 
𝑎
a and 
𝑏
b using the Euclidean algorithm and also calculates the coefficients 
𝑥
x and 
𝑦
y such that 
𝑎
𝑥
+
𝑏
𝑦
=
gcd
(
𝑎
,
𝑏
)
ax+by=gcd(a,b).

3. Modular Inverse Function:
python
Copy
Edit
def modInverse(e, phi):
    g, x, y = extended_gcd(e, phi)
    if g != 1:
        return -1  # No modular inverse exists if gcd is not 1
    return x % phi  # Return the modular inverse of e modulo phi
modInverse(e, phi) computes the modular inverse of 
𝑒
e modulo 
𝜙
ϕ using the Extended Euclidean Algorithm. If the GCD of 
𝑒
e and 
𝜙
ϕ is not 1, the modular inverse does not exist.

4. GCD Calculation:
python
Copy
Edit
def gcd(a, b):
    while b != 0:
        a, b = b, a % b  # Apply Euclidean algorithm to find GCD
    return a
gcd(a, b) computes the greatest common divisor of 
𝑎
a and 
𝑏
b using the Euclidean algorithm.

5. Prime Check:
python
Copy
Edit
def is_prime(n):
    if n < 2:
        return False  # Numbers less than 2 are not prime
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False  # If n is divisible by i, it's not prime
    return True
is_prime(n) checks if a number 
𝑛
n is prime by dividing it by all numbers up to 
𝑛
n
​
 .

6. RSA Key Generation:
python
Copy
Edit
def generateKeys(p, q):
    n = p * q  # Calculate n (modulus)
    phi = (p - 1) * (q - 1)  # Calculate phi(n) (Euler's Totient function)
    
    e = 2
    while e < phi:
        if gcd(e, phi) == 1:
            break  # Find an e that is coprime with phi(n)
        e += 1
    
    d = modInverse(e, phi)  # Calculate the modular inverse of e
    if d == -1:
        raise ValueError("No modular inverse found")
    
    return e, d, n  # Return the public and private keys (e, d) and modulus n
generateKeys(p, q) generates the RSA public and private keys.

𝑛
=
𝑝
×
𝑞
n=p×q (modulus used for both encryption and decryption)

𝜙
(
𝑛
)
=
(
𝑝
−
1
)
×
(
𝑞
−
1
)
ϕ(n)=(p−1)×(q−1) (Euler's Totient function)

Choose 
𝑒
e such that 
𝑒
e is coprime with 
𝜙
(
𝑛
)
ϕ(n).

Find 
𝑑
d such that 
𝑑
×
𝑒
≡
1
 
(
mod 
𝜙
(
𝑛
)
)
d×e≡1 (mod ϕ(n)) using the modular inverse function.

7. Encryption and Decryption:
python
Copy
Edit
def encrypt(m, e, n):
    return power(m, e, n)  # Encrypt the message m using the public key (e, n)

def decrypt(c, d, n):
    return power(c, d, n)  # Decrypt the ciphertext c using the private key (d, n)
encrypt(m, e, n) encrypts the message 
𝑚
m using the public key 
𝑒
e and modulus 
𝑛
n.

decrypt(c, d, n) decrypts the ciphertext 
𝑐
c using the private key 
𝑑
d and modulus 
𝑛
n.

8. Main Function to Test RSA:
python
Copy
Edit
def rsa():
    p = int(input("Enter a prime number (p): "))
    if not is_prime(p):
        print("p is not a prime number. Exiting.")
        return
    
    q = int(input("Enter another prime number (q): "))
    if not is_prime(q):
        print("q is not a prime number. Exiting.")
        return
    
    e, d, n = generateKeys(p, q)
    
    print(f"Public Key (e, n): ({e}, {n})")
    print(f"Private Key (d, n): ({d}, {n})")
    
    M = int(input("Enter a message (as a number) to encrypt: "))
    C = encrypt(M, e, n)
    print(f"Encrypted Message: {C}")
    
    decrypted = decrypt(C, d, n)
    print(f"Decrypted Message: {decrypted}")
rsa() is the main function that:

Takes two prime numbers 
𝑝
p and 
𝑞
q.

Generates RSA public and private keys.

Encrypts and decrypts a message.

Displays the public/private keys, encrypted message, and decrypted message.

Viva Questions and Answers (Short)
What is RSA encryption?

RSA is an asymmetric encryption algorithm that uses two keys: a public key for encryption and a private key for decryption. It relies on the difficulty of factoring large prime numbers.

Why do we use two prime numbers in RSA?

Two large prime numbers 
𝑝
p and 
𝑞
q are used to compute 
𝑛
=
𝑝
×
𝑞
n=p×q, which is part of both the public and private keys. Their product provides security since factoring large numbers is computationally difficult.

What is Euler's Totient Function (φ(n))?

𝜙
(
𝑛
)
=
(
𝑝
−
1
)
×
(
𝑞
−
1
)
ϕ(n)=(p−1)×(q−1) where 
𝑝
p and 
𝑞
q are the prime numbers. It is used in RSA to calculate the private key.

What is the role of the public key?

The public key 
(
𝑒
,
𝑛
)
(e,n) is used to encrypt messages. It is made public and can be shared with anyone.

What is the role of the private key?

The private key 
(
𝑑
,
𝑛
)
(d,n) is used to decrypt messages that were encrypted with the corresponding public key.

Why must 
𝑒
e be coprime with 
𝜙
(
𝑛
)
ϕ(n)?

𝑒
e must be coprime with 
𝜙
(
𝑛
)
ϕ(n) to ensure that a modular inverse 
𝑑
d exists, which is essential for decryption.

How do we ensure the security of RSA?

RSA's security depends on the difficulty of factoring large composite numbers. The larger the primes 
𝑝
p and 
𝑞
q, the more secure the encryption.